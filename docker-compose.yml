version: '3.8'

services:

  backend:
    container_name: backend
    build: ./backend/Social_network
    command: >
      bash -c "python manage.py migrate
      && python manage.py collectstatic
      && gunicorn Social_network.wsgi:application --bind 0.0.0.0:8000"
    restart: unless-stopped
    volumes:
      - static_value:/app/static/
      - media_value:/app/media/

    # close, open maybe swagger in nginx
    #    ports:
    #      - '8000:8000'
    env_file:
      - ./.env
    environment:
      - ENV=$ENV_PROD
    depends_on:
      - rabbitmq
      - db

  nginx:
    container_name: nginx
    image: nginx:1.25-alpine
    restart: unless-stopped
    volumes:
      - ./deployment/nginx/nginx.default.conf:/etc/nginx/conf.d/default.conf
      - ./deployment/certbot/conf:/etc/letsencrypt
      - ./deployment/certbot/www:/var/www/certbot
      - static_value:/var/html/static/
      - media_value:/var/html/media/
    ports:
      - '80:80'
      - "443:443"
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''


    depends_on:
      - backend

  certbot:
    container_name: certbot
    image: certbot/certbot:v2.7.0
    restart: unless-stopped
    volumes:
      - ./deployment/certbot/conf:/etc/letsencrypt
      - ./deployment/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  db:
    container_name: db
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=$PASSWORD
      - POSTGRES_DB=$NAME


  #  celery_worker_for_db:
  #    build: ./backend/Social_network
  #    command: celery --app=tasks worker -Q task_db --loglevel=INFO
  #
  #    volumes:
  #      - ./backend/Social_network:/usr/src/app/
  #
  #    # для доступа к базе при отправке email
  #    env_file:
  #      - ./.env
  #    depends_on:
  #      - backend


  celery_worker_for_email:
      build: ./backend/Social_network
      command: celery --app=tasks worker -Q email --loglevel=INFO
      volumes:
        - ./backend/Social_network:/usr/src/app/
      env_file:
        - ./.env
      depends_on:
        - backend
        - rabbitmq

  #  celery_worker_test:
  #    build: ./backend/Social_network
  #    command: celery --app=tasks worker -Q test_task --loglevel=INFO
  #    volumes:
  #      - ./backend/Social_network:/usr/src/app/
  #    env_file:
  #      - ./.env
  #    depends_on:
  #      - backend
  #      - rabbitmq
  #
#  celery_worker_task_1:
#    build: ./backend/Social_network
#    command: celery --app=tasks worker -Q task_1 --loglevel=INFO
#    volumes:
#      - ./backend/Social_network:/usr/src/app/
#    env_file:
#      - ./.env
#    depends_on:
#      - backend
#      - rabbitmq
#
#  celery_worker_task_2:
#    build: ./backend/Social_network
#    command: celery --app=tasks worker -Q task_2 --loglevel=INFO
#    volumes:
#      - ./backend/Social_network:/usr/src/app/
#    env_file:
#      - ./.env
#    depends_on:
#      - backend
#      - rabbitmq


  rabbitmq:
    container_name: "rabbitmq"
    image: rabbitmq:3.12-management-alpine
    restart: always

    # close
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq


#  celery-beat:
#    build: ./backend/Social_network
#    command: celery -A tasks beat --loglevel=INFO
#    volumes:
#      - ./project/:/usr/src/app/
#    depends_on:
#      - rabbitmq
volumes:
  postgres_data:
  static_value:
  media_value:

